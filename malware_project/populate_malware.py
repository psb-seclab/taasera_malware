import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'malware_project.settings')

import django
django.setup()

from malware.models import Malware
import urllib
import urllib2
import json
import time, datetime
import magic
import sys
from os.path import expanduser

'''
A cron job will be created to run this script everyday
'''



# mal_dir = '/home/maldata/taasera_malware_repository'
home = expanduser("~")
mal_dir = os.path.join(home, 'taasera_malware_repository')
today_str = datetime.date.today().isoformat()
#mal_path = os.path.join(mal_dir, today_str)

# get virustotal api keys
api_key = open('api_key.txt', 'r').read().split('\n')

api_count = 0


'''
def parse_vt_scan_rst(scan_rst, mal_obj):
    word_dict = {}
    for item in scan_rst:
        if scan_rst[item]['result']:
            # print item, scan_rst[item]['result']
            label = scan_rst[item]['result'].lower()
            label = label.replace('!', '.')
            label = label.replace('/', '.')
            label = label.replace(' ', '.')
            label = label.replace('gen', '')
            label = label.replace(':', '.')
            label = label.replace('-', '.')
            label = label.replace('(', '')
            label = label.replace(')', '') 
            word_list = label.split('.')
            for word in word_list:
                if len(word) == 1 or word.isdigit():
                    continue
                if word in word_dict:
                    word_dict[word] += 1
                else:
                    word_dict[word] = 1
    
    for item in word_dict:
        if word_dict[item] > 3:
            # creae tag
            tag = Tag.objects.get_or_create(name = item)[0]
            tag.save()
            mal_tag = Mal_Tag.objects.get_or_create(malware = mal_obj, tag=tag)[0]
            mal_tag.count = word_dict[item]
            mal_tag.save()
    return
'''


def in_vt(md5):
    global api_count
    param = {'resource':md5,'apikey':api_key[api_count % len(api_key)]}
    #param = {'resource':md5,'apikey':api_key}
    api_count = api_count + 1
    url = "https://www.virustotal.com/vtapi/v2/file/report"
    data = urllib.urlencode(param)
    result = urllib2.Request(url,data)
    response = urllib2.urlopen(result)
    jdata =  response.read()
    if jdata == '':
        return 'busy', None
    json_data = json.loads(jdata)

    # if it is NOT found in virus total
    if json_data['response_code'] == 0:
        return False, None
    
    return True, json_data#['permalink']

# todo
def in_malwr(md5):

    return False

def update_vt_status():
    '''
    update the freshness of samples
    '''
    samples = Malware.objects.filter(is_new=True)
    print '#'*70
    print 'Uniqueness status update on\t', today_str
    print '# samples to check: ', len(samples)
    cnt = 0
    for sample in samples:
        rst, json_data = in_vt(sample.md5)
        print 'checking', sample.md5,
        while rst == 'busy':
            # try until get rst
            print 'busy --> sleep for 33 sec'
            time.sleep(33)
            rst, json_data = in_vt(sample.md5)
        if rst:
            sample.is_new = False
            sample.virustotal_link = json_data['permalink']

            scan_rst = json_data['scans']
            detections = ""
            for scan in scan_rst:
                if scan_rst[scan]['result']: 
                    detections += "%s = %s <br>"%(scan, scan_rst[scan]['result'])
                    # print scan, scan_rst[scan]['result']
            sample.detections = detections
            sample.save()
            print "===> found in VT"
        else:
            print ""

            cnt += 1
    print '# samples that are no longer unique:', cnt
    print '#'*70


def in_db(md5, new_path):
    obj_set = Malware.objects.filter(md5=md5)
    if len(obj_set) > 0:
        # del the sample if there are two copies of it
        if new_path != obj_set[0].path:
            os.remove(new_path)
            print 'deleting', new_path
        return True
    return False


def update_db_with_detection():
    samples = Malware.objects.all()
    for item in samples:
        rst, json_data = in_vt(item.md5)
        while rst == 'busy':
            # try until get rst
            print 'busy --> sleep for 33 sec'
            time.sleep(33)
            rst, json_data = in_vt(item.md5)
        if rst is True:
            scan_rst = json_data['scans']
            detections = ""
            for scan in scan_rst:
                if scan_rst[scan]['result']: 
                    detections += "%s = %s <br>"%(scan, scan_rst[scan]['result'])
                    # print scan, scan_rst[scan]['result']
            item.detections = detections
            item.save()
    return


def populate(rep_date):
    '''
    @param  rep_date: a date str in isoformat yyyy-mm-dd
    '''

    mal_path = os.path.join(mal_dir, rep_date)
    print 'Getting samples from', mal_path
    malware_list = os.listdir(mal_path)
    #print malware_list
    #cnt = 0

    date_obj = datetime.datetime.strptime(rep_date, '%Y-%m-%d').date()
    
    cnt = 0
    for item in malware_list:
        # path
        path = os.path.join(mal_path, item)
        # check if the sample is already in the db
        if in_db(item[:32], path):
            print item, 'is already in the database!'
            continue

        # get md5
        md5 = item[:32]
        honeypot = item[33:]
        
        # vt link
        virustotal_link = ''
        detections = ''
        rst, json_data = in_vt(md5)
        while rst == 'busy':
            # try until get rst
            print 'busy --> sleep for 33 sec'
            time.sleep(33)
            rst, json_data = in_vt(md5)
        if rst is True:
            # get report link
            virustotal_link = json_data['permalink']
            # get vt detection result
            scan_rst = json_data['scans']
            detections = ""
            for scan in scan_rst:
                if scan_rst[scan]['result']: 
                    detections += "%s = %s <br>"%(scan, scan_rst[scan]['result'])

        # malwr link
        rst2 = in_malwr(md5)
        malwr_link = ''

        # is new?
        is_new = False
        if rst or rst2:
            is_new = False
        else:
            is_new = True
        pass

        # file type
        file_type = magic.from_file(path, mime=True)
        
        # file size
        file_size = os.path.getsize(path)

        cnt += 1
        print cnt, '\t [add]', item

        mal_obj = add_malware(md5, path, is_new, date_obj, 
            virustotal_link, malwr_link, file_type, file_size, honeypot, detections)

        # add tag info

        # if rst:
            # parse_vt_scan_rst(json_data['scans'], mal_obj)


    return

def add_malware(md5, path, is_new, date_added, 
                vt_link, malwr_link, file_type, 
                file_size, honeypot, detections):
    m = Malware.objects.get_or_create(md5 = md5)[0]
    m.path = path
    m.is_new = is_new
    m.date_added = date_added
    m.virustotal_link = vt_link
    m.malwr_link = malwr_link
    m.file_type = file_type
    m.file_size = file_size
    m.honeypot = honeypot
    m.detections = detections
    m.save()
    return m
    

def change_2_mime_type():
    all_samples = Malware.objects.all()
    for sample in all_samples:
        sample.file_type = magic.from_file(sample.path, mime=True)
        sample.save()
    return


def add_honeypot_field():
    print 'filling field of honeypot'
    all_samples = Malware.objects.all()
    for sample in all_samples:
        sample.honeypot = 'maltrieve'
        sample.save()
    return

def change_sample_name():
    print 'changing names of samples in file system as well as the path val'
    all_samples = Malware.objects.all()
    for sample in all_samples:
        sample.path = sample.path + '_maltrieve'
        sample.save()
    return

def cleanup_db():
    print 'cleaning database'
    Malware.objects.all().delete()
    return


def change_path_for_all():
    samples = Malware.objects.all()
    print len(samples), 'samples in the DB'
    for sample in samples:
        sample.path = sample.path.replace('/taasera/', '/maldata/')
        sample.save()
        print 'new path -->', sample.path 
    return


def show_content():
    samples = Malware.objects.all()
    
    for sample in samples:
        print sample.md5
    print len(samples)
    return

# TODO
def proc_args():
    import argparse
    parser = argparse.ArgumentParser(description='Process some integers.')

    return

def is_isoformat(date_str):
    s = len(date_str) == 10
    if date_str[0:4].isdigit() and date_str[5:7].isdigit() and date_str[8:].isdigit():

        a = int(date_str[0:4]) in range(2000, 2100)
        b = int(date_str[5:7]) in range(13)
        c = int(date_str[8:]) in range(32)
    else:
        return False
    
    d = date_str[4] == '-'
    e = date_str[7] == '-'
    return a and b and c and d and e and s

# Start execution here!

def usage():
    print 'usage:'
    print 'populate_malware.py'
    print 'populate_malware.py [-d yyyy-mm-dd]'
    print 'populate_malware.py [update]'

def run():
    # default 
    if len(sys.argv) == 1:
        populate(today_str)
    # update freshness
    elif len(sys.argv) == 2:
        if sys.argv[1] == 'update':
            update_vt_status()
        else:
            usage()
    # populate db by date
    elif len(sys.argv) == 3:
        if sys.argv[1] == '-d' and is_isoformat(sys.argv[2]):
            populate(sys.argv[2])
        else:
            usage()
    # undefined activity
    else:
        usage()

if __name__ == '__main__':
    #change_2_mime_type()
    #add_honeypot_field()
    #change_sample_name()
    #change_path_for_all()
    #update_vt_status()
    #cleanup_db()
    #update_db_with_detection()
    run()
    pass
    
    
