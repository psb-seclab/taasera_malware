import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'malware_project.settings')

import django
django.setup()

from malware.models import Malware, MType, Family
import urllib
import urllib2
import json
import time, datetime
import magic
import sys, subprocess
from os.path import expanduser

'''
A cron job will be created to run this script everyday
'''



# mal_dir = '/home/maldata/taasera_malware_repository'
home = expanduser("~")
mal_dir = os.path.join(home, 'taasera_malware_repository')
today_str = datetime.date.today().isoformat()
#mal_path = os.path.join(mal_dir, today_str)

# get virustotal api keys
#api_key_path = os.path.join(home, 'api_key.txt')
#api_key = open(api_key_path, 'r').read().split('\n')
api_key = [
"62c0004a48c6566a37ce377ebcabfb3b5d3258b462a25fc991c960d4bc84420a",
"08627a35926572f1076fac900d58b974faeb4f977a6d0b4f17f01ed6b6f643d6",
"14eb0af90f3162afd6875c3eaa61da003ca39725d06f9445f469c61913f4f7b0",
"f5ba007ee7c945be27a2b3b3529044770394e6ed865bad5d8c3966aba55240ef",
"b2a4726a002f20b65e85f3071926c3bc0e260307c6c0bb7707f6cedb7a233a43",
"ac145a2cebb93ab2260c81563a590547f0bb9bff322763adfb987bcca7cabacd",
"81eac77dfaca1e01815247184af68a25da9732d4096b75bba03f649a1a89d89d",
]

api_count = 0


'''
def parse_vt_scan_rst(scan_rst, mal_obj):
    word_dict = {}
    for item in scan_rst:
        if scan_rst[item]['result']:
            # print item, scan_rst[item]['result']
            label = scan_rst[item]['result'].lower()
            label = label.replace('!', '.')
            label = label.replace('/', '.')
            label = label.replace(' ', '.')
            label = label.replace('gen', '')
            label = label.replace(':', '.')
            label = label.replace('-', '.')
            label = label.replace('(', '')
            label = label.replace(')', '') 
            word_list = label.split('.')
            for word in word_list:
                if len(word) == 1 or word.isdigit():
                    continue
                if word in word_dict:
                    word_dict[word] += 1
                else:
                    word_dict[word] = 1
    
    for item in word_dict:
        if word_dict[item] > 3:
            # creae tag
            tag = Tag.objects.get_or_create(name = item)[0]
            tag.save()
            mal_tag = Mal_Tag.objects.get_or_create(malware = mal_obj, tag=tag)[0]
            mal_tag.count = word_dict[item]
            mal_tag.save()
    return
'''


def in_vt(md5):
    global api_count
    param = {'resource':md5,'apikey':api_key[api_count % len(api_key)]}
    #param = {'resource':md5,'apikey':api_key}
    api_count = api_count + 1
    url = "https://www.virustotal.com/vtapi/v2/file/report"
    data = urllib.urlencode(param)
    result = urllib2.Request(url,data)
    response = urllib2.urlopen(result)
    jdata =  response.read()
    if jdata == '':
        return 'busy', None
    json_data = json.loads(jdata)

    # if it is NOT found in virus total
    if json_data['response_code'] == 0:
        return False, None
    
    return True, json_data#['permalink']

# todo
def in_malwr(md5):

    return False


def process_id(id_str):
    import string
    replace_list = ['!', '/', ' ', ':', '-', '@']
    rm_list = ['unwanted', 'gen', '(', ')', '[', ']', 'html', 'w32', 'script', 'win32', 'js']

    id_str = id_str.lower()
    for item in replace_list:
        id_str = id_str.replace(item, '.')
    for item in rm_list:
        id_str = id_str.replace(item, '')
    id_str = id_str.replace('..', '.')

    rt_list = []
    for item in id_str.split('.'):
        if item == '' or item.isdigit() or len(item) < 4 or all(c in string.hexdigits for c in item):
            continue
        rt_list.append(item)
    return rt_list
    

def process_detections(detections):
    '''
    para - detections: the string detections
    return - tags: a list of tags by word frequency
    '''
    if len(detections) > 2:
        detection_list = detections.split('<br>')
        word_dict = {}

        for detection in detection_list:
            # format: aa = bb
            rst_list = detection.split('=')
            if len(rst_list) > 1:
                word_list = process_id(rst_list[1]) 
                # word frequency count
                for word in word_list:
                    if word in word_dict:
                        word_dict[word] += 1
                    else:
                        word_dict[word] = 1
        # print word_dict
        tags = ''    
        for w in sorted(word_dict, key=word_dict.get, reverse=True):
            # print w, word_dict[w]
            if word_dict[w] > 2:
                # keep it
                if MType.objects.filter(name=w).exists():
                    tags += "%s(%d);"%(w, word_dict[w])
                    continue
                if not Family.objects.filter(name=w).exists():
                    f_obj = Family.objects.get_or_create(name=w)[0]
                    f_obj.save()
                tags += "%s(%d);"%(w, word_dict[w])
        return tags
    return 'NA'


def update_db_with_tags_and_MType_Familty():
    samples = Malware.objects.all()
    for item in samples:
        tags = process_detections(item.detections)
        # print tags
        item.tags = tags
        item.save()

def update_db_add_MType_value():
    type_list = ['adware', 'backdoor', 'exploit', 'application', 'trojan', 'rootkit', 'worm', 'mornitor', 'unknown', 'riskware']
    for item in type_list:
        type_obj = MType.objects.get_or_create(name=item)[0]
        type_obj.save()


def update_vt_status():
    '''
    update the freshness of samples
    '''
    samples = Malware.objects.filter(is_new=True)
    print '#'*70
    print 'Uniqueness status update on\t', today_str
    print '# samples to check: ', len(samples)
    cnt = 0
    for sample in samples:
        rst, json_data = in_vt(sample.md5)
        print 'checking', sample.md5,
        while rst == 'busy':
            # try until get rst
            print 'busy --> sleep for 33 sec'
            time.sleep(33)
            rst, json_data = in_vt(sample.md5)
        if rst:
            sample.is_new = False
            sample.virustotal_link = json_data['permalink']

            scan_rst = json_data['scans']
            detections = ""
            for scan in scan_rst:
                if scan_rst[scan]['result']: 
                    detections += "%s = %s <br>"%(scan, scan_rst[scan]['result'])
                    # print scan, scan_rst[scan]['result']
            sample.detections = detections
            sample.save()
            print "===> found in VT"
            cnt += 1
        else:
            print ""

            
    print '# samples that are no longer unique:', cnt
    print '#'*70


def in_db(md5, new_path):
    obj_set = Malware.objects.filter(md5=md5)
    if len(obj_set) > 0:
        # del the sample if there are two copies of it
        if new_path != obj_set[0].path:
            os.remove(new_path)
            print 'deleting', new_path
        return True
    return False


def update_db_with_detection():
    samples = Malware.objects.all()
    for item in samples:
        rst, json_data = in_vt(item.md5)
        while rst == 'busy':
            # try until get rst
            print 'busy --> sleep for 33 sec'
            time.sleep(33)
            rst, json_data = in_vt(item.md5)
        if rst is True:
            scan_rst = json_data['scans']
            detections = ""
            for scan in scan_rst:
                if scan_rst[scan]['result']: 
                    detections += "%s = %s <br>"%(scan, scan_rst[scan]['result'])
                    # print scan, scan_rst[scan]['result']
            item.detections = detections
            item.save()
    return


def update_db_peframe_field():
    samples = Malware.objects.all()
    print 'updating...'

    for item in samples:
        if item.file_type == 'application/octet-stream' or \
        item.file_type == 'application/x-executable' or \
        item.file_type == 'application/x-dosexec':
            try:
                result = subprocess.check_output(["/usr/local/bin/peframe", item.path])
                result = result.replace('\n', '<br>')
                item.peframe = result
                item.save()
                print item.md5, 'updated!'
            except:
                pass
    return


def populate(rep_date):
    '''
    @param  rep_date: a date str in isoformat yyyy-mm-dd
    '''

    mal_path = os.path.join(mal_dir, rep_date)
    print 'Getting samples from', mal_path
    malware_list = os.listdir(mal_path)
    #print malware_list
    #cnt = 0

    date_obj = datetime.datetime.strptime(rep_date, '%Y-%m-%d').date()
    
    cnt = 0
    for item in malware_list:
        # path
        path = os.path.join(mal_path, item)
        # check if the sample is already in the db
        if in_db(item[:32], path):
            print item, 'is already in the database!'
            continue

        # get md5
        md5 = item[:32]
        honeypot = item[33:]
        
        # vt link
        virustotal_link = ''
        detections = ''
        rst, json_data = in_vt(md5)
        while rst == 'busy':
            # try until get rst
            print 'busy --> sleep for 33 sec'
            time.sleep(33)
            rst, json_data = in_vt(md5)
        if rst is True:
            # get report link
            virustotal_link = json_data['permalink']
            # get vt detection result
            scan_rst = json_data['scans']
            detections = ""
            for scan in scan_rst:
                if scan_rst[scan]['result']: 
                    detections += "%s = %s <br>"%(scan, scan_rst[scan]['result'])

        # malwr link
        rst2 = in_malwr(md5)
        malwr_link = ''

        # is new?
        is_new = False
        if rst or rst2:
            is_new = False
        else:
            is_new = True
        pass

        # file type
        file_type = magic.from_file(path, mime=True)

        peframe = 'NA'
        if file_type == 'application/octet-stream' or \
        file_type == 'application/x-executable' or \
        file_type == 'application/x-dosexec':
            try:
                result = subprocess.check_output(["/usr/local/bin/peframe", path])
                peframe = result.replace('\n', '<br>')
            except:
                pass

        
        # file size
        file_size = os.path.getsize(path)

        cnt += 1
        print cnt, '\t [add]', item

        mal_obj = add_malware(md5, path, is_new, date_obj, 
            virustotal_link, malwr_link, file_type, file_size, honeypot, detections, peframe)

    return

def add_malware(md5, path, is_new, date_added, 
                vt_link, malwr_link, file_type, 
                file_size, honeypot, detections, peframe):
    m = Malware.objects.get_or_create(md5 = md5)[0]
    m.path = path
    m.is_new = is_new
    m.date_added = date_added
    m.virustotal_link = vt_link
    m.malwr_link = malwr_link
    m.file_type = file_type
    m.file_size = file_size
    m.honeypot = honeypot
    m.detections = detections
    m.peframe = peframe
    m.tags = process_detections(detections)
    m.save()
    return m
    

def change_2_mime_type():
    all_samples = Malware.objects.all()
    for sample in all_samples:
        sample.file_type = magic.from_file(sample.path, mime=True)
        sample.save()
    return


def add_honeypot_field():
    print 'filling field of honeypot'
    all_samples = Malware.objects.all()
    for sample in all_samples:
        sample.honeypot = 'maltrieve'
        sample.save()
    return

def change_sample_name():
    print 'changing names of samples in file system as well as the path val'
    all_samples = Malware.objects.all()
    for sample in all_samples:
        sample.path = sample.path + '_maltrieve'
        sample.save()
    return

def cleanup_db():
    print 'cleaning database'
    Malware.objects.all().delete()
    return


def change_path_for_all():
    samples = Malware.objects.all()
    print len(samples), 'samples in the DB'
    for sample in samples:
        sample.path = sample.path.replace('/taasera/', '/maldata/')
        sample.save()
        print 'new path -->', sample.path 
    return


def show_content():
    samples = Malware.objects.all()
    
    for sample in samples:
        print sample.md5
    print len(samples)
    return

# TODO
def proc_args():
    import argparse
    parser = argparse.ArgumentParser(description='Process some integers.')

    return

def is_isoformat(date_str):
    s = len(date_str) == 10
    if date_str[0:4].isdigit() and date_str[5:7].isdigit() and date_str[8:].isdigit():

        a = int(date_str[0:4]) in range(2000, 2100)
        b = int(date_str[5:7]) in range(13)
        c = int(date_str[8:]) in range(32)
    else:
        return False
    
    d = date_str[4] == '-'
    e = date_str[7] == '-'
    return a and b and c and d and e and s

# Start execution here!

def usage():
    print 'usage:'
    print 'populate_malware.py'
    print 'populate_malware.py [-d yyyy-mm-dd]'
    print 'populate_malware.py [update]'

def run():
    # default 
    if len(sys.argv) == 1:
        populate(today_str)
    # update freshness
    elif len(sys.argv) == 2:
        if sys.argv[1] == 'update':
            update_vt_status()
        else:
            usage()
    # populate db by date
    elif len(sys.argv) == 3:
        if sys.argv[1] == '-d' and is_isoformat(sys.argv[2]):
            populate(sys.argv[2])
        else:
            usage()
    # undefined activity
    else:
        usage()

if __name__ == '__main__':
    #change_2_mime_type()
    #add_honeypot_field()
    #change_sample_name()
    #change_path_for_all()
    #update_vt_status()
    # cleanup_db()
    #update_db_with_detection()
    # update_db_peframe_field()
    # update_db_with_tags_and_MType_Familty()
    # update_db_add_MType_value()
    # run()
    pass
    
    
