import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'malware_project.settings')

import django
django.setup()

from malware.models import Malware
import urllib
import urllib2
import json
import time, datetime
import magic


'''
This means to be the server side script which does the following:
-   Check all samples in '/home/taasera/taasera_malware_repository/yyyy-mm-dd'
    if a sample exists in the db, delete it, or add it to the DB.
-   Report the # of samples found today, send an email to the group
-   TODO: XX
A cron job will be created to run this script everyday
'''



mal_dir = '/home/taasera/taasera_malware_repository'
today_str = datetime.date.today().isoformat()
#mal_path = os.path.join(mal_dir, today_str)

#api_key = '62c0004a48c6566a37ce377ebcabfb3b5d3258b462a25fc991c960d4bc84420a'
api_key = ["62c0004a48c6566a37ce377ebcabfb3b5d3258b462a25fc991c960d4bc84420a", "08627a35926572f1076fac900d58b974faeb4f977a6d0b4f17f01ed6b6f643d6", "14eb0af90f3162afd6875c3eaa61da003ca39725d06f9445f469c61913f4f7b0"]
api_count = 0


def populate_entire_rep():
    return


def in_vt(md5):
    global api_count
    param = {'resource':md5,'apikey':api_key[api_count % 3]}
    #param = {'resource':md5,'apikey':api_key}
    api_count = api_count + 1
    url = "https://www.virustotal.com/vtapi/v2/file/rescan"
    data = urllib.urlencode(param)
    result = urllib2.Request(url,data)
    response = urllib2.urlopen(result)
    jdata =  response.read()
    if jdata == '':
        return 'busy', None
    json_data = json.loads(jdata)
    #print json_data
    if json_data['response_code'] == 0:
        return False, None
    return True, json_data['permalink']

# todo
def in_malwr(md5):

    return False


def in_db(md5, new_path):
    obj_set = Malware.objects.filter(md5=md5)
    if len(obj_set) > 0:
        # del the sample if there are two copies of it
        if new_path != obj_set[0].path:
            os.remove(new_path)
            print 'deleting', new_path
        return True
    return False



def populate(rep_date):
    '''
    @param  rep_date: a date str in isoformat yyyy-mm-dd
    '''
    mal_path = os.path.join(mal_dir, rep_date)
    print 'getting samples from', mal_path
    malware_list = os.listdir(mal_path)
    #print malware_list
    cnt = 0

    date_obj = datetime.datetime.strptime(rep_date, '%Y-%m-%d').date()
    
    for item in malware_list:
        # path
        path = os.path.join(mal_path, item)
        # check if the sample is already in the db
        if in_db(item, path):
            print item, 'is already in the database!'
            continue
            

        '''
        cnt += 1
        if cnt == 50:
            break
        '''

        # get md5
        md5 = item
        
        
        # vt link
        virustotal_link = ''
        rst, link = in_vt(md5)
        while rst == 'busy':
            # try until get rst
            print 'busy --> sleep for 33 sec'
            time.sleep(33)
            rst, link = in_vt(md5)
        if rst is True:
            virustotal_link = link
            #print md5, 'is in VT'

        # malwr link
        rst2 = in_malwr(md5)
        malwr_link = ''

        # is new?
        is_new = False
        if rst or rst2:
            is_new = False
        else:
            is_new = True
        pass

        # file type
        file_type = magic.from_file(path)
        
        # file size
        file_size = os.path.getsize(path)

        print md5, str(file_size) +' bytes'

        add_malware(md5, path, is_new, date_obj, 
            virustotal_link, malwr_link, file_type, file_size)


    return

def add_malware(md5, path, is_new, date_added, 
                vt_link, malwr_link, file_type, file_size):
    m = Malware.objects.get_or_create(md5 = md5)[0]
    m.path = path
    m.is_new = is_new
    m.date_added = date_added
    m.virustotal_link = vt_link
    m.malwr_link = malwr_link
    m.file_type = file_type
    m.file_size = file_size
    m.save()
    

def cleanup_db():
    print 'cleaning database'
    Malware.objects.all().delete()
    return

def show_content():
    samples = Malware.objects.all()
    for sample in samples:
        print sample.md5
    print len(samples)
    return

# Start execution here!
if __name__ == '__main__':
    print "Starting malware DB script..."
    #cleanup_db()
    populate('2015-07-14')
    
    #pupulate(today_str)
    #show_content()
    #samples = Malware.objects.all()
