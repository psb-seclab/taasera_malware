import os
#import pefile
import peframe
import sys
import subprocess
import json

basedir = "/home/maldata/taasera_malware_repository"
big_files_dir = "/home/maldata/taasera_malware_repository/big_files"

if __name__ == '__main__' :

  if len(sys.argv) != 2:
    print "Input: elminate_bad_malshare.py date_folder"
    exit(1)

  date_folder = sys.argv[1]
  target_path = os.path.join(basedir, date_folder)

  if not os.path.isdir(target_path):
    print "Invalid directory: " + target_path
    exit(1)

  ls_size_order_output = subprocess.check_output(["ls", "-1S", target_path])

  file_list = ls_size_order_output.split("\n")

  bin32_file_info_dict = {}
  other_file_info_list = []

  for file_name in file_list:

    if "malshare" not in file_name:
      continue

    try:
      file_path = os.path.join(target_path, file_name)
    except:
      print "Unable to create file path from " + target_path + " and " + file_name + ". Skipping..."
      continue

    if not os.path.exists(file_path):
      print "File " + file_path + " does not exist. Skipping..."
      continue

    try:
      file_size = os.path.getsize(file_path)
    except:
      print "Unable to get file size for " + file_path + ". Skipping..."
      continue

    if file_size > 2097152:
      print "Moving big file " + file_path + " to " + big_files_dir
      os.rename(file_path, os.path.join(big_files_dir, file_name))
      continue

    try:
      file_type = subprocess.check_output(["file", file_path])
    except:
      print "Failed to get file type with file " + file_path + ". Skipping..."
      continue

# Example binary /home/maldata/taasera_malware_repository/2015-10-24/39cc544bbb3c424c02ec56cf564afa81_malshare

    if "PE32 executable" in file_type:

      try:
#        file_imphash = pefile.PE(file_path).get_imphash()
        peframe_output = subprocess.check_output(["peframe", file_path])
        peframe_output_lines = peframe_output.split('\n')
        for line in peframe_output_lines:
          if "Imphash" in line:
            file_imphash = line[line.rfind(" ")+1:]
      except:
        print "Failed to get import hash for " + file_path + ". Skipping..."
        continue

#      bin32_file_info_list.append((file_path, file_size, file_imphash))
      if file_imphash in bin32_file_info_dict.keys():
        bin32_file_info_dict[file_imphash].append((file_path, file_size))
        print "Appending " + file_path + " to " + file_imphash + " dict"
      else:
        bin32_file_info_dict[file_imphash] = [(file_path, file_size)]
        print "Creating " + file_imphash + " dict list with " + file_path
    else:

      other_file_info_list.append((file_path, file_size))

    
  print "32 bins:"
  for bin32_import_hash in bin32_file_info_dict.keys():

    bin32_import_hash_list = bin32_file_info_dict[bin32_import_hash]

    if len(bin32_import_hash_list) > 1:

      first_bin = True

      for bin32_file_info in bin32_import_hash_list:
        if first_bin:
          first_bin = False
          current_bin = bin32_file_info
          continue

        last_bin = current_bin
        current_bin = bin32_file_info

        if abs((last_bin[1] - current_bin[1]) / 0.5 / (last_bin[1] + current_bin[1])) >= 0.1:
          print "Deleting " + current_bin[0] + ", file size " + current_bin[1] + ", imphash " + bin32_import_hash + ". Too similar to " + last_bin[0] + ", file size " + last_bin[1] + ", same imphash."
          os.remove(current_bin[0])
          current_bin = last_bin

#    current_bin = bin32_file_info

##    if (abs((last_bin[1] - current_bin[1]) / 0.5 / (last_bin[1] + current_bin[1])) >= 0.1:
##      if 

  print "\n\n"
  print "Other files:"
  for other_file_info in other_file_info_list:
    print other_file_info
