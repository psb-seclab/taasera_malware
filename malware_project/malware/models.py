from malware.utils import bytes2human
from django.db import models
from django.utils.html import format_html
import django_filters

# Create your models here.

class Family(models.Model):
    name = models.CharField(max_length=128, unique=True)
    desc = models.TextField(default='NA')
    class Meta:
        ordering = ('name',)
    def __unicode__(self):
        return self.name

class MType(models.Model):
    name = models.CharField(max_length=128, unique=True)
    desc = models.TextField(default='NA')
    class Meta:
        ordering = ('name',)
    def __unicode__(self):
        return self.name

class Malware(models.Model):
    #honeypots = ['N/A', 'dionaea', 'maltrieve', 'monkeynet', 'malshare', 'cuckoo']
    # analysts = ['Andrew Hankewycz', 'Brian O\'Connell', 'Mark Stankiewicz', 'Zhifeng Xiao']
    #honeypot_choices = [(x, x) for x in honeypots]

    #category = models.ForeignKey(Category)
    md5 = models.CharField(max_length=32, unique=True)
    path = models.CharField(max_length=200, default='')
    is_new = models.BooleanField(default=False)
    date_added = models.DateField(auto_now_add=True)
    virustotal_link = models.URLField()
    malwr_link = models.URLField()
    file_type = models.CharField(max_length=50, default='')
    file_size = models.IntegerField(default=0)
    # honeypot = models.CharField(max_length=40, default=honeypots[0], choices=honeypot_choices)
    honeypot = models.CharField(max_length=40, default='NA')
    detections = models.TextField(default='NA')
    peframe = models.TextField(default='NA')

    analyst = models.CharField(max_length=50, default='NA')
    report_status = models.CharField(max_length=50, default='Unfinished')
    report_url = models.URLField(default='')
    report_date = models.CharField(max_length=50, default='')

    tags = models.CharField(max_length=200, default='NA')


    def sample_size(self):
        return bytes2human(self.file_size)

    def VirusTotal_analysis(self):
    	if len(self.virustotal_link) > 8:
    		return format_html('<a href="{}" target="_blank">{}</a>',
                           self.virustotal_link,
                           'VirusTotal Report')
    	else:
    		return 'Not Available'
	
	VirusTotal_analysis.allow_tags = True

    def __unicode__(self):      #For Python 2, use __str__ on Python 3
        return self.md5


'''
class Mal_Tag(models.Model):
    malware = models.ForeignKey(Malware)
    tag = models.ForeignKey(Tag)
    count = models.IntegerField(default=0)

    def __unicode__(self):
        return "%s_%s"%(self.malware, self.tag)
'''





