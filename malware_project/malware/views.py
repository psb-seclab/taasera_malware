
from django.shortcuts import render
from django.template import RequestContext
from django.shortcuts import render_to_response
from django.contrib.auth.models import User
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.contrib import messages
from django.contrib.messages import get_messages
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.http import HttpResponseRedirect, HttpResponse


from malware.models import Malware

#####################################
#
#   utils
#
#####################################
def paging(request, obj_list, limit):
    paginator = Paginator(obj_list, limit) # paging obj
    page = request.GET.get('page')
    try:
        obj_list = paginator.page(page)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        obj_list = paginator.page(1)
        return obj_list
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        obj_list = paginator.page(paginator.num_pages)
        return obj_list
    return obj_list

#####################################
#
#   views
#
#####################################
def index(request, md5_code=None):

    # Construct a dictionary to pass to the template engine as its context.
    # Note the key boldmessage is the same as {{ boldmessage }} in the template!
    context = RequestContext(request)

    if request.method == 'POST':
        md5_val = request.POST['md5_val']
        try:
            num = len(Malware.objects.all())
            item = Malware.objects.get(md5=md5_val)
            context_dict = {}
            mal_list = []
            mal_list.append(item)
            mal_list = paging(request, mal_list, 25)
            context_dict['samples'] = mal_list
            context_dict['num_samples'] = num

            return render_to_response('malware/index.html', context_dict, context)
            
        except Malware.DoesNotExist:
            return render_to_response('malware/index.html', 
                {'not_found': 'The malware is not in the database'}, context)
            
        pass

    if md5_code != None:
        try:
            item = Malware.objects.get(md5=md5_code)
            file_content = open(item.path, 'rb')
            res = HttpResponse(file_content, item.file_type)
            res['Content-Disposition'] = 'attachment; filename='+ md5_code
            file_content.close()
            return res
            
            pass
        except Malware.DoesNotExist:
            print 'not found'

    num = len(Malware.objects.all())
    mal_list = Malware.objects.order_by('-date_added')#[:100]
    context_dict = {}

    mal_list = paging(request, mal_list, 25)

    context_dict['samples'] = mal_list
    context_dict['num_samples'] = num

    # Return a rendered response to send to the client.
    # We make use of the shortcut function to make our lives easier.
    # Note that the first parameter is the template we wish to use.

    return render_to_response('malware/index.html', context_dict, context)


def about(request):
	return HttpResponse("<a href='/malware/''>Index</a>")

def detail(request, md5_code):

    # Create a context dictionary which we can pass to the template rendering engine.
    context_dict = {}
    try:
        # Can we find a category name slug with the given name?
        # If we can't, the .get() method raises a DoesNotExist exception.
        # So the .get() method returns one model instance or raises an exception.
        item = Malware.objects.get(md5=md5_code)
        #print sample

        context_dict['sample'] = item

    except Malware.DoesNotExist:
    	print 'not found'
        # We get here if we didn't find the specified category.
        # Don't do anything - the template displays the "no category" message for us.
        pass

    # Go render the response and return it to the client.
    return render(request, 'malware/detail.html', context_dict)









