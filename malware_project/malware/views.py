
from django.shortcuts import render
from django.template import RequestContext
from django.shortcuts import render_to_response
from django.contrib.auth.models import User
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.contrib import messages
from django.contrib.messages import get_messages

from django.contrib.auth.decorators import login_required
from django.http import HttpResponseRedirect, HttpResponse


from malware.models import Malware

import django_filters

class MalwareFilter(django_filters.FilterSet):
    class Meta:
        model = Malware
        fields = ['is_new', 'date_added', 'honeypot', 'file_type']
        '''
        fields = {
            'is_new':['exact'],
            'date_added':['exact'],
            'honeypot':['exact'],
            'file_type':['contains'],
        }
        '''
        order_by = ['-date_added']

#####################################
#
#   utils
#
#####################################
def paging(request, obj_list, limit):
    paginator = Paginator(obj_list, limit) # paging obj
    page = request.GET.get('page')
    try:
        obj_list = paginator.page(page)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        obj_list = paginator.page(1)
        return obj_list
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        obj_list = paginator.page(paginator.num_pages)
        return obj_list
    return obj_list

#####################################
#
#   views
#
#####################################
@login_required
def index(request, md5_code=None):

    # Construct a dictionary to pass to the template engine as its context.
    # Note the key boldmessage is the same as {{ boldmessage }} in the template!
    context = RequestContext(request)
    context_dict = {}

    #########################################
    # get file type
    tmp_list = Malware.objects.all().values("file_type").distinct()
    ftype_list = []
    for item in tmp_list:
        ftype_list.append(item['file_type'])
    context_dict['ftype_list'] = ftype_list

    #########################################

    # config cookies
    cookie_ftype = request.session.get('file_type')
    cookie_isnew = request.session.get('is_new')
    cookie_date = request.session.get('date_added')
    cookie_honeypot = request.session.get('honeypot')
    
    if not cookie_ftype:
        request.session['cookie_ftype'] = None
    if not cookie_isnew:
        request.session['cookie_isnew'] = None
    if not cookie_date:
        request.session['cookie_date'] = None
    if not cookie_honeypot:
        request.session['cookie_honeypot'] = None

    #########################################
    # POST request
    if request.method == 'POST':

        # search malware by md5
        if 'md5_val' in request.POST:
            md5_val = request.POST['md5_val']
            try:
                num = len(Malware.objects.all())
                item = Malware.objects.get(md5=md5_val)
                
                mal_list = []
                mal_list.append(item)
                mal_list = paging(request, mal_list, 25)
                context_dict['samples'] = mal_list
                context_dict['num_samples'] = num

                return render_to_response('malware/index.html', context_dict, context)
                
            except Malware.DoesNotExist:
                return render_to_response('malware/index.html', 
                    {'not_found': 'The malware is not in the database!'}, context)

        if 'clear' in request.POST:
            request.session['cookie_ftype']     = None
            request.session['cookie_isnew']     = None
            request.session['cookie_date']      = None
            request.session['cookie_honeypot']  = None    
            return HttpResponseRedirect("/malware/")        
        else:    
            if 'file_type' in request.POST:
                request.session['cookie_ftype'] = request.POST['file_type']
                context_dict['ftype_pick'] = request.POST['file_type']
            if 'is_new' in request.POST:
                request.session['cookie_isnew'] = request.POST['is_new']
                context_dict['isnew_pick'] = request.POST['is_new']
            if 'date_added' in request.POST:
                request.session['cookie_date'] = request.POST['date_added']
                context_dict['date_pick'] = request.POST['date_added']
            if 'honeypot' in request.POST:
                request.session['cookie_honeypot'] = request.POST['honeypot']
                context_dict['honeypot_pick'] = request.POST['honeypot']

        #print request.session['filter_list'] 
        #print request.POST
        mal_list = MalwareFilter(request.POST, queryset=Malware.objects.all())
        num = len(mal_list)

        # regular malware list
        #num = len(Malware.objects.all())
        #mal_list = Malware.objects.order_by('-date_added')#[:100]

        mal_list = paging(request, mal_list, 25)

        context_dict['samples'] = mal_list
        context_dict['num_samples'] = num

        return render_to_response('malware/index.html', context_dict, context)        


    #########################################
    # Get request
    if request.method == 'GET':
        # download a malware
        if md5_code != None:
            try:
                item = Malware.objects.get(md5=md5_code)
                file_content = open(item.path, 'rb')
                res = HttpResponse(file_content, item.file_type)
                res['Content-Disposition'] = 'attachment; filename='+ md5_code
                file_content.close()
                return res
            except Malware.DoesNotExist:
                print 'not found'


        # apply filter
        mal_list = MalwareFilter(request.GET, queryset=Malware.objects.all())
        num = len(mal_list)

        # regular malware list
        #num = len(Malware.objects.all())
        #mal_list = Malware.objects.order_by('-date_added')#[:100]

        mal_list = paging(request, mal_list, 25)

        context_dict['samples'] = mal_list
        context_dict['num_samples'] = num

        # Return a rendered response to send to the client.
        # We make use of the shortcut function to make our lives easier.
        # Note that the first parameter is the template we wish to use.

        return render_to_response('malware/index.html', context_dict, context)


def about(request):
	return HttpResponse("<a href='/malware/''>Index</a>")

@login_required
def detail(request, md5_code):

    # Create a context dictionary which we can pass to the template rendering engine.
    context_dict = {}
    try:
        # Can we find a category name slug with the given name?
        # If we can't, the .get() method raises a DoesNotExist exception.
        # So the .get() method returns one model instance or raises an exception.
        item = Malware.objects.get(md5=md5_code)
        #print sample

        context_dict['sample'] = item

    except Malware.DoesNotExist:
        # We get here if we didn't find the specified category.
        # Don't do anything - the template displays the "no category" message for us.
        pass

    # Go render the response and return it to the client.
    return render(request, 'malware/detail.html', context_dict)









