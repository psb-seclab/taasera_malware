import string, random, os
import time, datetime

from django.shortcuts import render
from django.template import RequestContext
from django.shortcuts import render_to_response
from django.contrib.auth.models import User
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.contrib import messages
from django.contrib.messages import get_messages

from django.contrib.auth.decorators import login_required
from django.http import HttpResponseRedirect, HttpResponse
from django.conf import settings

from malware.models import Malware, MType, Family

import django_filters

class MalwareFilter(django_filters.FilterSet):
    class Meta:
        model = Malware
        fields = ['is_new', 'date_added', 'honeypot', 'file_type']
        '''
        fields = {
            'is_new':['exact'],
            'date_added':['exact'],
            'honeypot':['exact'],
            'file_type':['contains'],
        }
        '''
        order_by = ['-date_added']


#####################################
#
#   utils
#
#####################################
def paging(request, obj_list, limit):
    paginator = Paginator(obj_list, limit) # paging obj
    page = request.GET.get('page')
    try:
        obj_list = paginator.page(page)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        obj_list = paginator.page(1)
        return obj_list
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        obj_list = paginator.page(paginator.num_pages)
        return obj_list
    return obj_list


def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

#####################################
#
#   views
#
#####################################

@login_required
def index(request, md5_code=None):

    # Construct a dictionary to pass to the template engine as its context.
    # Note the key boldmessage is the same as {{ boldmessage }} in the template!
    context = RequestContext(request)
    context_dict = {}

    #########################################
    # get file type
    tmp_list = Malware.objects.all().values("file_type").distinct()
    ftype_list = []
    for item in tmp_list:
        ftype_list.append(item['file_type'])
    context_dict['ftype_list'] = ftype_list

    # honeypot list
    honeypot_list = ['dionaea', 'maltrieve', 'monkeynet', 'malshare', 'cuckoo']
    context_dict['honeypot_list'] = honeypot_list

    trailer = "" # for paging purposes
    

    #########################################
    # POST request
    #########################################
    if request.method == 'POST':
        # search malware by md5
        if 'md5_val' in request.POST:
            md5_val = request.POST['md5_val']
            try:
                num = len(Malware.objects.all())
                item = Malware.objects.get(md5=md5_val)
                
                mal_list = []
                mal_list.append(item)
                mal_list = paging(request, mal_list, 25)
                context_dict['samples'] = mal_list
                context_dict['num_samples'] = num

                return render_to_response('malware/index.html', context_dict, context)
                
            except Malware.DoesNotExist:
                return render_to_response('malware/index.html', 
                    {'not_found': 'The malware is not in the database!', 'ftype_list': ftype_list}, context)

        if 'clear' in request.POST:
            return HttpResponseRedirect("/malware/")        
        else:    
            if 'file_type' in request.POST:
                context_dict['ftype_pick'] = request.POST['file_type']
                trailer = trailer + "&file_type=" + request.POST['file_type']
            if 'is_new' in request.POST:
                context_dict['isnew_pick'] = request.POST['is_new']
                trailer = trailer + "&is_new=" + request.POST['is_new']
            if 'date_added' in request.POST:
                if request.POST['date_added'] != '':
                    context_dict['date_pick'] = request.POST['date_added']
                    trailer = trailer + "&date_added=" + request.POST['date_added']
            if 'honeypot' in request.POST:
                context_dict['honeypot_pick'] = request.POST['honeypot']
                trailer = trailer + "&honeypot=" + request.POST['honeypot']

            # if 'report_status' in request.POST:
            #     context_dict['status_pick'] = request.POST['report_status']
            #     trailer = trailer + "&report_status=" + request.POST['report_status']

        context_dict['trailer'] = trailer
        # filter applied
        mal_list = MalwareFilter(request.POST, queryset=Malware.objects.all())
        num = len(mal_list)


        # generate download link
        if 'download' in request.POST:
            if num == 0:
                context_dict['msg_down'] = "Nothing to download"
            if num > 200:
                context_dict['msg_down'] = "You can only download less than 200 samples at a time"
            else:
                from zipfile import ZipFile
                from os.path import expanduser
                '''
                home = expanduser("~")
                p1 = id_generator()
                p2 = request.session['cookie_ftype']
                if p2:
                    p2 = p2.replace('/','-')
                p3 = request.session['cookie_isnew']
                p4 = request.session['cookie_date']
                p5 = request.session['cookie_honeypot']
                p_list = [x for x in [p1,p2,p3,p4,p5] if x]
                zipname = '_'.join(p_list)
                '''
                # write to disk
                with ZipFile(os.path.join(settings.STATIC_ROOT, 'samples.zip'), 'w') as myzip:
                    for sample in mal_list:
                        myzip.write(sample.path, sample.md5)

                return HttpResponseRedirect("/static/samples.zip")        
               
        # regular malware list
        #num = len(Malware.objects.all())
        #mal_list = Malware.objects.order_by('-date_added')#[:100]

        mal_list = paging(request, mal_list, 25)

        context_dict['samples'] = mal_list
        context_dict['num_samples'] = num

        return render_to_response('malware/index.html', context_dict, context)        


    #########################################
    # Get request
    #########################################
    if request.method == 'GET':
        # download a malware
        if md5_code != None:
            try:
                item = Malware.objects.get(md5=md5_code)
                file_content = open(item.path, 'rb')
                res = HttpResponse(file_content, item.file_type)
                res['Content-Disposition'] = 'attachment; filename='+ md5_code
                file_content.close()
                return res
            except Malware.DoesNotExist:
                print 'not found'

        if 'file_type' in request.GET:
            context_dict['ftype_pick'] = request.GET['file_type']
            trailer = trailer + "&file_type=" + request.GET['file_type']
        if 'is_new' in request.GET:
            context_dict['isnew_pick'] = request.GET['is_new']
            trailer = trailer + "&is_new=" + request.GET['is_new']
        if 'date_added' in request.GET:
            context_dict['date_pick'] = request.GET['date_added']
            trailer = trailer + "&date_added=" + request.GET['date_added']
        if 'honeypot' in request.GET:
            context_dict['honeypot_pick'] = request.GET['honeypot']
            trailer = trailer + "&honeypot=" + request.GET['honeypot']
        # if 'report_status' in request.GET:
        #     context_dict['status_pick'] = request.GET['report_status']
        #     trailer = trailer + "&report_status=" + request.GET['report_status']
        
        mal_list = Malware.objects.all()

        if 'peframe' in request.GET:
            filter_list = request.GET['peframe'].split(":")
            for item in filter_list:
                mal_list = mal_list.filter(peframe__icontains=item)
            trailer = trailer + "&peframe=" + request.GET['peframe']

        if 'detections' in request.GET:
            mal_list = mal_list.filter(detections__icontains=request.GET['detections'])
            trailer = trailer + "&detections=" + request.GET['detections']

        if 'tags' in request.GET:
            mal_list = mal_list.filter(tags__icontains=request.GET['tags'])
            trailer = trailer + "&tags=" + request.GET['tags']



        context_dict['trailer'] = trailer

        # apply filter
        mal_list = MalwareFilter(request.GET, queryset=mal_list)
        num = len(mal_list)

        # regular malware list
        #num = len(Malware.objects.all())
        #mal_list = Malware.objects.order_by('-date_added')#[:100]

        mal_list = paging(request, mal_list, 25)

        context_dict['samples'] = mal_list
        context_dict['num_samples'] = num

        # Return a rendered response to send to the client.
        # We make use of the shortcut function to make our lives easier.
        # Note that the first parameter is the template we wish to use.

        return render_to_response('malware/index.html', context_dict, context)


def about(request):
	return HttpResponse("<a href='/malware/''>Index</a>")

@login_required
def detail(request, md5_code):
    analysts = ['Andrew Hankewycz', 'Brian O\'Connell', 'Mark Stankiewicz', 'Zhifeng Xiao']

    # Create a context dictionary which we can pass to the template rendering engine.
    context_dict = {}
    try:
        # Can we find a category name slug with the given name?
        # If we can't, the .get() method raises a DoesNotExist exception.
        # So the .get() method returns one model instance or raises an exception.
        item = Malware.objects.get(md5=md5_code)
        
        context_dict['analysts'] = analysts
        if request.method == 'GET':
            pass
        if request.method == 'POST':
            if 'analyst' in request.POST:
                analyst = request.POST['analyst']
                if analyst != 'NA':
                    item.analyst = analyst
                    if request.POST['report_url'] == "":
                        item.report_status = "pending"
            if 'report_url' in request.POST:
                report_url = request.POST['report_url']
                if report_url != '':
                    item.report_url = report_url
                    item.report_date = datetime.date.today().isoformat()
                    item.report_status = "ready"

            item.save()

        context_dict['sample'] = item            

    except Malware.DoesNotExist:
        # We get here if we didn't find the specified category.
        # Don't do anything - the template displays the "no category" message for us.
        return HttpResponseRedirect("/malware/")

    # Go render the response and return it to the client.
    return render(request, 'malware/detail.html', context_dict)




