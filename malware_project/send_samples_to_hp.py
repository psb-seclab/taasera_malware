#!/usr/bin/python 

import sys
import paramiko
from scp import SCPClient
import os, datetime
import time

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'malware_project.settings')
import django
django.setup()

from malware.models import Malware, MType, Family

server = '70.61.16.2'
port = 22
user = 'scp_in'
password = 'pooT$uMsamples1229'

default_base_source_dir = "/home/maldata/taasera_malware_repository/"
default_base_dest_dir = "/home/scp_in/taasera_malware_repository/"


def createSSHClient(server, port, user, password):
	client = paramiko.SSHClient()
	client.load_system_host_keys()
	client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
	client.connect(server, port, user, password)
	return client

def main(source_dir, dest_dir, honeypots):
	print 'Connecting to ' + server + '...'
	ssh = createSSHClient(server, port, user, password)
	scp = SCPClient(ssh.get_transport())
	print 'Connected'


	print "source_dir = ", source_dir
	print "dest_dir = ", dest_dir


	dict_sample = {}

	files = [f for f in os.listdir(source_dir) if os.path.isfile(os.path.join(source_dir,f))]

	for item in files:
		potential_dict_sample = os.path.join(source_dir, item), item[:32], item[33:]
		malware_sample = Malware.objects.filter(md5=item[:32])		
		if len(malware_sample) == 0:
			print "ERROR! ", potential_dict_sample[0], " with md5 ", potential_dict_sample[1], " from ", potential_dict_sample[2], " is not in the database"
			continue
# 10/23/15 12:29am EST Brian - Removing is_new test because not enough samples being run
#		if malware_sample[0].file_type == "application/octet-stream" and malware_sample[0].is_new == True and potential_dict_sample[2] != 'cuckoo' and potential_dict_sample[2] != 'malshare' :
# 10/24/15 11:20pm EST Brian - Removing malshare exclusion as I am implementing script to remove excess malshare files
#		if malware_sample[0].file_type == "application/octet-stream" and potential_dict_sample[2] != 'cuckoo' and potential_dict_sample[2] != 'malshare' :
#		if malware_sample[0].file_type == "application/octet-stream" and potential_dict_sample[2] != 'cuckoo' :
#		if potential_dict_sample[2] != 'cuckoo' :
# 11/4/15 8:36pm EST Brian - again restricted to binary samples since html/javascript are not being properly analyzed...
#		if malware_sample[0].file_type == "application/octet-stream" and potential_dict_sample[2] != 'cuckoo' :
# 11/8/15 6:21pm EST Brian - Re-enable text/html after changing to Windows XP VM
#		if potential_dict_sample[2] != 'cuckoo' :
# 11/9/15 9:03pm Changing this back after realizing that html analyses are taking up an extreme amount of space
		if malware_sample[0].file_type == "application/octet-stream" and potential_dict_sample[2] in honeypots :
			dict_sample[item] = potential_dict_sample
			print "Sample ", potential_dict_sample[0], potential_dict_sample[1], potential_dict_sample[2]
	

	cnt = 0
	dest_dir = dest_dir + "/"
	print 'Samples go to', dest_dir

	for k in dict_sample:
		cmd_mkdir = "mkdir -p " + dest_dir + dict_sample[k][2]
		print "Current mkdir command: ", cmd_mkdir 
		ssh.exec_command(cmd_mkdir)
		time.sleep(0.2)
		cnt += 1
		path_to_bin =  dict_sample[k][0]
		print "path_to_bin = ", path_to_bin
		print cnt, '[Put]', dict_sample[k][0], "as", dict_sample[k][2]+"/"+dict_sample[k][1]
		target = dest_dir + dict_sample[k][2] + "/" + dict_sample[k][1]
		print "target = ", target
		scp.put(path_to_bin, target)

	scp.close()

if __name__ == '__main__':

	source_dir = ""
	dest_dir = ""
	honeypots = []

	if len(sys.argv) < 3:
		print "Usage: send_samples_to_hp.py --honeypots <honeypot1>[,<honeypot2>[,..]] [--source-folder <source_folder>] [--destination-folder <destination_folder>]"
		sys.exit(0)

	args_iter = iter(range(len(sys.argv)))
	for i in args_iter:
		if sys.argv[i] == '--honeypots':
			try:
				next(args_iter)
			except StopIteration:
				print "Error: honeypots parameter requires comma separated list argument" 
				sys.exit(1)
			honeypots = sys.argv[i+1].split(',')
		if sys.argv[i] == '--source-folder':
			try:
				next(args_iter)
			except StopIteration:
				print "Error: source-folder parameter requires path argument"
				sys.exit(1)
			source_dir = sys.argv[i+1]
		if sys.argv[i] == '--destination-folder':
			try:
				next(args_iter)
			except StopIteration:
				print "Error: destination-folder parameter requires path argument"
				sys.exit(1)
			dest_dir = sys.argv[i+1]
		if sys.argv[i] == '--folder':
			try:
				next(args_iter)
			except StopIteration:
				print "Error: folder parameter requires folder argument"
				sys.exit(1)
			source_dir = os.path.join(default_base_source_dir, sys.argv[i+1])
			dest_dir = os.path.join(default_base_dest_dir, sys.argv[i+1])

	today = datetime.date.today()
	today_str = today.isoformat()

	if len(honeypots) == 0:
		print "Error: At least one honeypot must be specified"
		sys.exit(1)
	if source_dir == "":
		source_dir = os.path.join(default_base_source_dir, today_str)
	if dest_dir == "":
		dest_dir = os.path.join(default_base_dest_dir,today_str)

	main(source_dir, dest_dir, honeypots)